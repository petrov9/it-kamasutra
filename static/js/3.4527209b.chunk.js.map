{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/post/Post.tsx","components/Profile/MyPosts/AddNewFormPost.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateUserStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","styles","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","s","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","title","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","facebook","push","website","vk","descBlock","src","photos","large","userPhoto","mainPhoto","target","files","length","initialValues","formData","then","Post","item","alt","id","message","likeCount","required","MyPosts","posts","reverse","likesCount","postsBlock","values","addPost","newPostText","MyPostMemorized","React","memo","MyPostsContainer","connect","state","profilePage","actions","Profile","params","useParams","history","useHistory","useSelector","authorizedUserId","auth","userId","dispatch","useDispatch","getProfileW","getUserStatusW","console","saveProfileW","a","getProfile","getUserStatus","file","ProfileContainer"],"mappings":"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","file":"static/js/3.4527209b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descBlock\":\"ProfileInfo_descBlock__3Sq7v\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1yoaP\",\"contact\":\"ProfileInfo_contact__kGwox\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__7WCXS\",\"posts\":\"MyPosts_posts__37ZFd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__36fwr\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateUserStatus: (newStatus: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateUserStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !editMode &&\r\n                <div>\r\n                    <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || \"No status\"}</span>\r\n                </div>\r\n            }\r\n            {\r\n                editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../common/FormControls/FormsControls\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport styles from \"../../common/FormControls/FormsControls.module.css\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            <div>\r\n                <button> save</button>\r\n            </div>\r\n            {\r\n                error && <div className={styles.formSummaryError}>\r\n                    {error}\r\n                </div>\r\n            }\r\n\r\n            <div>\r\n                <b>Full name:</b>\r\n                {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b>\r\n                {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills:</b>\r\n                {createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n\r\n            </div>\r\n            <div>\r\n                <b>About me:</b>\r\n                {createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea)}\r\n            </div>\r\n            {<div>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                return <div key={key} className={s.contact}>\r\n                    <b>{key}:</b>\r\n                    {createField(key, \"contacts.\" + key, [], Textarea)}\r\n                </div>\r\n            })}\r\n            </div>}\r\n        </form>\r\n    );\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: \"edit-profile\"})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm","import s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/user.png\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateUserStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    let contacts = [];\r\n    if (profile.contacts.facebook) {\r\n        contacts.push(<p>{profile.contacts.facebook}</p>)\r\n    }\r\n    if (profile.contacts.website) {\r\n        contacts.push(<p>{profile.contacts.website}</p>)\r\n    }\r\n    if (profile.contacts.vk) {\r\n        contacts.push(<p>{profile.contacts.vk}</p>)\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        // todo: remove then()\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descBlock}>\r\n                <div>\r\n                    <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                    {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n\r\n                    {editMode\r\n                        ? <ProfileDataForm profile={profile} initialValues={profile} onSubmit={onSubmit}/>\r\n                        : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)}/>}\r\n\r\n                </div>\r\n                <div>\r\n                    <ProfileStatusWithHooks status={status} updateUserStatus={updateUserStatus}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n\r\n            {isOwner && <div>\r\n                <button onClick={goToEditMode}> edit</button>\r\n            </div>}\r\n\r\n            <div>\r\n                <b>Full name:</b> {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b> {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {\r\n                profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills:</b> {profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me:</b> {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} title={key} value={profile.contacts[key as keyof ContactsType]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype ContactsPropsType = {\r\n    title: string\r\n    value: string\r\n}\r\n\r\nconst Contact: React.FC<ContactsPropsType> = ({title, value}) => {\r\n    return <div className={s.contact}><b>{title}</b>: {value}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import s from './Post.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://www.meme-arsenal.com/memes/100773de10bd652a2366e129c5053a0a.jpg\" alt=\"\" id=\"src\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likeCount}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Textarea} from \"../../common/FormControls/FormsControls\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\nimport React from \"react\";\r\n\r\ntype PropsType = {}\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\n\r\ntype AddFormPostValuesKeysType = GetStringKeys<AddPostFormValuesType>\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType & PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<AddFormPostValuesKeysType>(\"Post message\", \"newPostText\", [required], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({form: \"profile-add-post\"})(AddPostForm)","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./post/Post\";\r\nimport AddPostForm, {AddPostFormValuesType} from \"./AddNewFormPost\";\r\nimport {PostType} from \"../../../types/types\";\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n\r\n    let posts = [...props.posts].reverse().map(e => <Post key={e.id} message={e.message} likeCount={e.likesCount}/>)\r\n\r\n    let onAddPost = (values: AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <div>\r\n                <h3>My posts</h3>\r\n                <AddPostForm onSubmit={onAddPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {posts}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst MyPostMemorized = React.memo(MyPosts)\r\n\r\nexport default MyPostMemorized;","import React from 'react';\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n    addPost: actions.addPost\r\n})(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React, {useEffect} from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../types/types\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getProfile, getUserStatus, savePhoto, saveProfile, updateUserStatus} from \"../../redux/profile-reducer\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\n\r\ntype PropsType = {}\r\n\r\nconst Profile: React.FC<PropsType> = () => {\r\n\r\n    const params: any = useParams();\r\n    const history = useHistory();\r\n\r\n    const profile = useSelector((state: AppStateType) => state.profilePage.profile)\r\n    const status = useSelector((state: AppStateType) => state.profilePage.status)\r\n    const authorizedUserId = useSelector((state: AppStateType) => state.auth.userId)\r\n    const isOwner = !params.userId\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        let userId: number | null = +params.userId;\r\n        if (!userId) {\r\n            userId = authorizedUserId;\r\n\r\n            if (!userId) {\r\n                history.push(\"/login\");\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            console.error(\"ID should exist in URI params or in the state ('authorizedUserId')\")\r\n        } else {\r\n            getProfileW(userId);\r\n            getUserStatusW(userId);\r\n        }\r\n    }, [status, isOwner])\r\n\r\n    const updateUserStatusW = (status: string) => {\r\n        dispatch(updateUserStatus(status))\r\n    }\r\n\r\n    const savePhotoW = (file: File) => {\r\n        dispatch(savePhoto(file))\r\n    }\r\n\r\n    const saveProfileW = async (profile: ProfileType) => {\r\n        await dispatch(saveProfile(profile))\r\n    }\r\n\r\n    const getProfileW = (userId: number) => {\r\n        dispatch(getProfile(userId))\r\n    }\r\n\r\n    const getUserStatusW = (userId: number) => {\r\n        dispatch(getUserStatus(userId))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profile={profile}\r\n                status={status}\r\n                updateUserStatus={updateUserStatusW}\r\n                isOwner={isOwner}\r\n                savePhoto={savePhotoW}\r\n                saveProfile={saveProfileW}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\n\r\nconst ProfileContainer = () => {\r\n    return (\r\n        <Profile/>\r\n    );\r\n}\r\n\r\nexport default ProfileContainer"],"sourceRoot":""}