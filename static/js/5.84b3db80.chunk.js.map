{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["ChatPage","Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScrollIsActive","current","scrollIntoView","behavior","style","height","overflow","onScroll","event","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","memo","width","src","photo","userName","setMessage","onChange","e","value","disabled","onClick","sendMessage"],"mappings":"6KAceA,UAPY,WACvB,OACI,8BACI,cAACC,EAAD,OAMZ,IAAMA,EAAiB,WAEnB,IAAMC,EAAWC,cAEXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAU/D,OARAI,qBAAU,WAGN,OAFAN,EAASO,eAEF,WACHP,EAASQ,kBAEd,IAGC,gCACgB,UAAXN,GAAsB,+EACvB,cAACO,EAAD,IACA,cAACC,EAAD,QAKND,EAAqB,WAEvB,IAAME,EAAWR,aAAa,SAACC,GAAD,OAAyBA,EAAMC,KAAKM,YAC5DC,EAAoBC,iBAAuB,MACjD,EAAgDC,oBAAS,GAAzD,mBAAOC,EAAP,KAAqBC,EAArB,KAiBA,OANAV,qBAAU,WACa,IAAD,EAAdS,IACA,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACR,IAGA,sBAAKS,MAAO,CAACC,OAAQ,QAASC,SAAU,QAASC,SAhB/B,SAACC,GACnB,IAAIC,EAAUD,EAAME,cAChBC,KAAKC,IAAIH,EAAQI,aAAeJ,EAAQK,UAAYL,EAAQM,cAAgB,EAC5Ef,GAAwB,GAExBA,GAAwB,IAW5B,UACKL,EAASqB,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAACC,EAAD,CAAoBC,QAASH,GAAfA,EAAEI,OAC5C,qBAAKC,IAAK1B,QAShBuB,EAAkCI,IAAMC,MAAK,YAAgB,IAAdJ,EAAa,EAAbA,QACjD,OACI,gCACI,qBAAKhB,MAAO,CAACqB,MAAO,QAASC,IAAKN,EAAQO,QAAQ,4BAAIP,EAAQQ,WAC9D,uBACCR,EAAQA,QACT,6BAKN1B,EAA2B,WAE7B,MAA8BI,mBAAS,IAAvC,mBAAOsB,EAAP,KAAgBS,EAAhB,KACM3C,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAEzDF,EAAWC,cAYjB,OACI,gCACI,8BACI,0BAAU6C,SAAU,SAACC,GACjBF,EAAWE,EAAErB,cAAcsB,QAC5BA,MAAOZ,MAEd,8BACI,cAAC,IAAD,CAAQa,SAAqB,UAAX/C,EAAoBgD,QAlBvB,WAElBd,IAILpC,EAASmD,YAAYf,IACrBS,EAAW,MAWH","file":"static/js/5.84b3db80.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\r\nimport {Button} from \"antd\";\r\nimport {ChatMessageApiType} from \"../../api/chat-api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/chat-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <Chat/>\r\n        </div>\r\n    )\r\n}\r\nexport default ChatPage\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status);\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            {status === \"error\" && <div>Some error occurred. Please refresh the page</div>}\r\n            <Messages/>\r\n            <AddMessageForm/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Messages: React.FC = () => {\r\n\r\n    const messages = useSelector(((state: AppStateType) => state.chat.messages))\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n    const [isAutoScroll, setIsAutoScrollIsActive] = useState(false)\r\n\r\n    const scrollHandler = (event: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        var element = event.currentTarget;\r\n        if (Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) < 1) {\r\n            setIsAutoScrollIsActive(true)\r\n        } else {\r\n            setIsAutoScrollIsActive(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: \"smooth\"})\r\n        }\r\n    }, [messages])\r\n\r\n    return (\r\n        <div style={{height: \"400px\", overflow: \"auto\"}} onScroll={scrollHandler}>\r\n            {messages.map((m, index) => <Message key={m.id} message={m}/>)}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MessageProps = {\r\n    message: ChatMessageApiType\r\n}\r\n\r\nconst Message: React.FC<MessageProps> = React.memo(({message}) => {\r\n    return (\r\n        <div>\r\n            <img style={{width: \"30px\"}} src={message.photo}/><b>{message.userName}</b>\r\n            <br/>\r\n            {message.message}\r\n            <hr/>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddMessageForm: React.FC = () => {\r\n\r\n    const [message, setMessage] = useState(\"\");\r\n    const status = useSelector((state: AppStateType) => state.chat.status);\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const sendMessageHandler = () => {\r\n\r\n        if (!message) {\r\n            return;\r\n        }\r\n\r\n        dispatch(sendMessage(message))\r\n        setMessage(\"\")\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea onChange={(e) => {\r\n                    setMessage(e.currentTarget.value)\r\n                }} value={message}></textarea>\r\n            </div>\r\n            <div>\r\n                <Button disabled={status !== \"ready\"} onClick={sendMessageHandler}>send</Button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}"],"sourceRoot":""}