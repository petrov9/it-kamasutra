{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","className","s","dialog","src","state","avatarImage","to","id","name","Message","message","isMyMessage","myMessage","notMyMessage","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Dialogs","dialogsElements","dialogsPage","dialogs","map","e","messagesElements","messages","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","actions","WrappedComponent","restProps"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,UAAY,2BAA2B,aAAe,gC,oBCAlSD,EAAOC,QAAU,CAAC,QAAU,4BAA4B,aAAe,iCAAiC,OAAS,2BAA2B,OAAS,2BAA2B,SAAW,6BAA6B,QAAU,8B,+GCiBnNC,EATyB,SAACC,GACrC,OACI,sBAAKC,UAAWC,IAAEC,OAAlB,UACI,qBAAKC,IAAKJ,EAAMK,MAAMC,cACtB,cAAC,IAAD,CAASC,GAAI,YAAcP,EAAMK,MAAMG,GAAvC,SAA4CR,EAAMK,MAAMI,WCGrDC,EARkB,SAACV,GAC9B,OACI,qBAAKC,UAAWC,IAAES,UAAYX,EAAMK,MAAMO,YAAcV,IAAEW,UAAYX,IAAEY,cAAxE,SACKd,EAAMK,MAAMM,W,0BCLrBI,EAAcC,YAAiB,IAkBtBC,EAAsBC,YAA+C,CAC9EC,KAAM,wBADyBD,EAbkE,SAAClB,GAClG,OACI,uBAAMoB,SAAUpB,EAAMqB,aAAtB,UACI,8BACKC,YAA0C,qBAAsB,iBAAkB,CAACC,IAAUR,GAAcS,OAEhH,8BACI,oGCoBDC,EArByB,SAACzB,GACrC,IAAI0B,EAAkB1B,EAAM2B,YAAYC,QAAQC,KAAI,SAACC,GAAD,OAAmB,cAAC,EAAD,CAAYzB,MAAOyB,GAAQA,EAAEtB,OAChGuB,EAAmB/B,EAAM2B,YAAYK,SAASH,KAAI,SAACC,GAAD,OAAoB,cAAC,EAAD,CAASzB,MAAOyB,GAAQA,EAAEtB,OAMpG,OACI,sBAAKP,UAAWC,IAAE0B,QAAlB,UACI,qBAAK3B,UAAWC,IAAE+B,aAAlB,SACKP,IAEL,qBAAKzB,UAAWC,IAAE8B,SAAlB,SACI,8BAAMD,MAEV,cAACd,EAAD,CAAqBG,SAZT,SAACc,GACjBlC,EAAMmC,YAAYD,EAAOE,uB,6CCjB7BC,EAA6B,SAAChC,GAC9B,MAAO,CACHiC,OAAQjC,EAAMkC,KAAKD,S,YCmBZE,sBACXC,aAPkB,SAACpC,GACnB,MAAO,CACHsB,YAAatB,EAAMsB,eAK2E,CAACQ,YAAaO,IAAQP,eDVrH,SAAgEQ,GAanE,OAHiCF,YAA6CJ,EAA4B,GAAzEI,EATqC,SAACzC,GAEnE,IAAKsC,EAAwBtC,EAAxBsC,OAAWM,EAAhB,YAA6B5C,EAA7B,GAEA,OAAKsC,EAEE,cAACK,EAAD,eAAsBC,IAFT,cAAC,IAAD,CAAUrC,GAAI,gBCI3BiC,CAGbf","file":"static/js/4.7a4d6b4c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3OER_\",\"dialogsItems\":\"Dialogs_dialogsItems__2NyO2\",\"active\":\"Dialogs_active__3-8fN\",\"dialog\":\"Dialogs_dialog__3JPaC\",\"messages\":\"Dialogs_messages__bhlB4\",\"message\":\"Dialogs_message__eJn46\",\"myMessage\":\"Dialogs_myMessage__1IjlN\",\"notMyMessage\":\"Dialogs_notMyMessage__2u3H-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"DialogItem_dialogs__3_J_2\",\"dialogsItems\":\"DialogItem_dialogsItems__2DLVV\",\"active\":\"DialogItem_active__2i7ul\",\"dialog\":\"DialogItem_dialog__3xuAZ\",\"messages\":\"DialogItem_messages__1L8vV\",\"message\":\"DialogItem_message__17TC-\"};","import s from './DialogItem.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {DialogType} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    state: DialogType\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <img src={props.state.avatarImage}/>\r\n            <NavLink to={'/dialogs/' + props.state.id}>{props.state.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import s from './../Dialogs.module.css'\r\nimport React from \"react\";\r\nimport {MessageType} from \"../../../types/types\";\r\n\r\ntype Props = {\r\n    state: MessageType\r\n}\r\n\r\nconst Message: React.FC<Props> = (props) => {\r\n    return (\r\n        <div className={s.message && (props.state.isMyMessage ? s.myMessage : s.notMyMessage)}>\r\n            {props.state.message}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;","import {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Textarea} from \"../common/FormControls/FormsControls\";\r\nimport {NewMessageFormValuesType} from \"./Dialogs\";\r\n\r\nlet maxLength50 = maxLengthCreator(50);\r\n\r\ntype NewMessageFormValuesKeysType = GetStringKeys<NewMessageFormValuesType>\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesKeysType>(\"Enter your message\", \"newMessageBody\", [required, maxLength50], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Отправить</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm<NewMessageFormValuesType, PropsType>({\r\n    form: \"dialogAddMessageForm\"\r\n})(AddMessageForm)\r\n\r\n","import s from './Dialogs.module.css'\r\nimport React from \"react\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogType, MessageType} from \"../../types/types\";\r\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport {AddMessageFormRedux} from \"./AddMessageForm\";\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\ntype OwnPropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nconst Dialogs: React.FC<OwnPropsType> = (props) => {\r\n    let dialogsElements = props.dialogsPage.dialogs.map((e: DialogType) => <DialogItem state={e} key={e.id}/>);\r\n    let messagesElements = props.dialogsPage.messages.map((e: MessageType) => <Message state={e} key={e.id}/>)\r\n\r\n    let addNewMessage = (values: NewMessageFormValuesType) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;","import * as React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {\r\n}\r\n\r\nexport function withAuthRedirect<WCP extends JSX.IntrinsicAttributes> (WrappedComponent: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n\r\n        let {isAuth, ...restProps} = props;\r\n\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect<MapPropsType, {}, WCP, AppStateType>(mapStateToPropsForRedirect, {})\r\n    (RedirectComponent);\r\n\r\n    return ConnectedRedirectComponent;\r\n}","import React from \"react\";\r\nimport {actions} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: any\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    };\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, AppStateType>(mapStateToProps, {sendMessage: actions.sendMessage}),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}